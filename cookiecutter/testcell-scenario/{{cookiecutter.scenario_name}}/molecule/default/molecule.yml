---
dependency:
  name: galaxy
  enabled: yes
  requirements-file: collections.yml

platforms:
{%- set image_name = 'generic/' + cookiecutter.platform %}
{%- if cookiecutter.layout.startswith('1 host') %}
  - name: {{ cookiecutter.instance_prefix }}afs
    box: "{{ image_name }}"
    groups:
      - afs_admin_client
      - afs_clients
      - afs_databases
      - afs_fileservers
      - afs_kdcs
      - afs_test
  {%- if (cookiecutter.install_method in ['packages', 'bdist', 'sdist']) and (cookiecutter.enable_builds == 'yes') %}
      - afs_builders
  {%- endif %}
{%- elif cookiecutter.layout.startswith('2 hosts') %}
  - name: {{ cookiecutter.instance_prefix }}afs01
    box: "{{ image_name }}"
    groups:
      - afs_kdcs
      - afs_databases
      - afs_fileservers

  - name: {{ cookiecutter.instance_prefix }}afs02
    box: "{{ image_name }}"
    groups:
      - afs_admin_client
      - afs_clients
      - afs_test
  {%- if (cookiecutter.install_method in ['packages', 'bdist', 'sdist']) and (cookiecutter.enable_builds == 'yes') %}
      - afs_builders
  {%- endif %}
{%- elif cookiecutter.layout.startswith('6 hosts') %}
  - name: {{ cookiecutter.instance_prefix }}afs01
    box: "{{ image_name }}"
    groups:
      - afs_databases
      - afs_kdcs
  {%- if (cookiecutter.install_method in ['packages', 'bdist', 'sdist']) and (cookiecutter.enable_builds == 'yes') %}
      - afs_builders
  {%- endif %}

  - name: {{ cookiecutter.instance_prefix }}afs02
    box: "{{ image_name }}"
    groups:
      - afs_fileservers

  - name: {{ cookiecutter.instance_prefix }}afs03
    box: "{{ image_name }}"
    groups:
      - afs_fileservers

  - name: {{ cookiecutter.instance_prefix }}afs04
    box: "{{ image_name }}"
    groups:
      - afs_admin_client
      - afs_clients
      - afs_test

  - name: {{ cookiecutter.instance_prefix }}afs05
    box: "{{ image_name }}"
    groups:
      - afs_clients

  - name: {{ cookiecutter.instance_prefix }}afs06
    box: "{{ image_name }}"
    groups:
      - afs_clients
{%- elif cookiecutter.layout.startswith('9 hosts') %}
  - name: {{ cookiecutter.instance_prefix }}afs01
    box: "{{ image_name }}"
    groups:
      - afs_kdcs
      - afs_databases
  {%- if (cookiecutter.install_method in ['packages', 'bdist', 'sdist']) and (cookiecutter.enable_builds == 'yes') %}
      - afs_builders
  {%- endif %}

  - name: {{ cookiecutter.instance_prefix }}afs02
    box: "{{ image_name }}"
    groups:
      - afs_databases

  - name: {{ cookiecutter.instance_prefix }}afs03
    box: "{{ image_name }}"
    groups:
      - afs_databases

  - name: {{ cookiecutter.instance_prefix }}afs04
    box: "{{ image_name }}"
    groups:
      - afs_fileservers

  - name: {{ cookiecutter.instance_prefix }}afs05
    box: "{{ image_name }}"
    groups:
      - afs_fileservers

  - name: {{ cookiecutter.instance_prefix }}afs06
    box: "{{ image_name }}"
    groups:
      - afs_fileservers

  - name: {{ cookiecutter.instance_prefix }}afs07
    box: "{{ image_name }}"
    groups:
      - afs_clients
      - afs_admin_client
      - afs_test

  - name: {{ cookiecutter.instance_prefix }}afs08
    box: "{{ image_name }}"
    groups:
      - afs_clients

  - name: {{ cookiecutter.instance_prefix }}afs09
    box: "{{ image_name }}"
    groups:
      - afs_clients
{%- endif %}

provisioner:
  name: ansible
  playbooks:
    prepare: "${MOLECULE_SCENARIO_DIRECTORY}/../playbooks/prepare.yml"
    converge: "${MOLECULE_SCENARIO_DIRECTORY}/../playbooks/converge.yml"
  inventory:
    group_vars:
      all:
        afs_realm: "{{ cookiecutter.realm }}"
        afs_cell: "{{ cookiecutter.cell }}"
        afs_user: "${USER}"
        afs_admin: "${USER}.admin"
        afs_realm_files: "${MOLECULE_EPHEMERAL_DIRECTORY}"
        afs_cell_files: "${MOLECULE_EPHEMERAL_DIRECTORY}"
        afs_csdb_file: "${MOLECULE_EPHEMERAL_DIRECTORY}/csdb.yaml"
        afs_security_model: "none"
        afs_install_method: "{{ cookiecutter.install_method }}"
{%- if (cookiecutter.install_method in ['managed', 'packages']) %}
  {%- if cookiecutter.enable_dkms == 'yes' %}
        afs_module_install_method: "dkms"
  {%- else %}
        afs_module_install_method: "kmod"
  {%- endif %}
{%- endif %}
{%- if cookiecutter.install_method != 'managed' %}
{%-   if (cookiecutter.enable_builds != 'yes') %}
        afs_install_archive: "${AFS_INSTALL_ARCHIVE}"
{%-   else %}
        afs_git_repo: "${AFS_GIT_REPO}"
        afs_git_version: "${AFS_GIT_VERSION}"
        afs_build_directory: "${AFS_BUILD_DIRECTORY}"
        afs_archive_directory: "${AFS_ARCHIVE_DIRECTORY}"
{%-     if cookiecutter.install_method != 'packages' %}
{%-       if cookiecutter.platform == 'solaris114' %}
        afs_configure_options:
          enable:
            - transarc-paths
            - debug
            - debug-kernel
            - kernel-module
          disable:
            - optimize
        afs_nolibafs_configure_options:
          enable:
            - transarc-paths
            - debug
          disable:
            - kernel-module
            - optimize
{%-       else  %}
        afs_configure_options:
          enable:
            - debug
            - debug-kernel
            - kernel-module
          disable:
            - optimize
          with:
            - linux-kernel-packaging
        afs_nolibafs_configure_options:
          enable:
            - debug
          disable:
            - kernel-module
            - optimize
{%-       endif %}
{%-     endif %}
{%-   endif %}
{%- endif %}
{%- if cookiecutter.layout.startswith('1 host') %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_prefix }}afs"
{%- elif cookiecutter.layout.startswith('2 hosts)') %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_prefix }}afs01"
{%- elif cookiecutter.layout.startswith('6 hosts)') %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_prefix }}afs02"
        afs_robotest_fileserver_b: "{{ cookiecutter.instance_prefix }}afs03"
{%- elif cookiecutter.layout.startswith('9 hosts') %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_prefix }}afs04"
        afs_robotest_fileserver_b: "{{ cookiecutter.instance_prefix }}afs05"
{%- endif %}

verifier:
  name: robotframework
  enabled: true
  group: afs_test
  libraries:
    - robotframework-openafslibrary
{%- if cookiecutter._template.startswith('https:') or
       cookiecutter._template.startswith('http:') or
       cookiecutter._template.startswith('gh:') %}
  test_repos:
    - name: openafs-robotest
      repo: {{ cookiecutter._template | replace('gh:', 'https://github.com/') }}
      version: master
{%- else %}
  test_directory: openafs-robotest
  test_data:
    - {{ cookiecutter._template }}/tests
{%- endif %}
  resources:
    - ${MOLECULE_SCENARIO_DIRECTORY}/../templates/openafs-robotest.yml.j2
  options:
    exclude:
      - bug
      - slow
      - rogue-avoidance
{%- if cookiecutter.layout.startswith('1 host') %}
      - requires-multi-fs
{%- endif %}
    loglevel: INFO
    runemptysuite: true
    variablefile: openafs-robotest.yml
  data_sources:
    - openafs-robotest/tests
  dest_dir: ${MOLECULE_SCENARIO_DIRECTORY}/../../reports

scenario:
  create_sequence:
    - create
    - prepare
  check_sequence:
    - dependency
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - dependency
    - create
    - prepare
    - converge
  destroy_sequence:
    - cleanup
    - destroy
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - verify
    - cleanup
    - destroy
